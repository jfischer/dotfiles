#!/usr/bin/env python
# Multi-file Search and replace
import os
import os.path
import sys
from optparse import OptionParser
import tempfile
import re
import tty
import termios

def getch():
    fd = sys.stdin.fileno()
    old_settings = termios.tcgetattr(fd)
    try:
        tty.setraw(fd)
        ch = sys.stdin.read(1)
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
    return ch
    
parser = OptionParser(usage="%prog [options] expr replace [file1 file2 ...]")

parser.add_option("-d", "--dry-run", default=False,
                  action="store_true",
                  help="Print out what would be changed without doing anything")
parser.add_option("-a", "--ask-for-confirmation", default=False,
                  action="store_true",
                  help="Ask for confirmation before making change")
parser.add_option("-i", "--ignore-errors", default=False,
                  action="store_true",
                  help="Ignore any errors (e.g. file does not exist) and continue")
parser.add_option("-e", "--regular-expression", default=False,
                  action="store_true",
                  help="Treat expression as a regular expression rather than a literal")
(options, args) = parser.parse_args(sys.argv[1:])
if len(args)==0:
    parser.print_help()
    sys.exit(0)
if len(args)==1:
    parser.error("need to specify two arguments: expr and replace value")
from_expr = args[0]
to_expr = args[1]
if len(args)>2:
    files = args[2:]
else:
    if options.ask_for_confirmation:
        parser.error("Can only ask for confirmation if files provided on command line")
    files = sys.stdin

if options.regular_expression:
    pat = from_expr
else:
    pat = re.escape(from_expr)

# input should be files, one per line
subfiles = 0
for l in files:
    path = l.rstrip()
    if not os.path.exists(path):
        if options.ignore_errors:
            print "Could not find %s" % path
        else:
            raise Exception("Could not find %s" % path)
    with open(path, "r") as f:
        if not any(re.search(pat, line) for line in f):
            continue
    changes_made = False
    if not options.dry_run:
        tf = tempfile.NamedTemporaryFile(delete=False)
    try:
        with open(path, "r") as ifile:
            lineno = 0
            for line in ifile:
                lineno += 1
                nline = re.sub(pat, to_expr, line)
                if nline != line:
                    if options.ask_for_confirmation:
                        print "%s:%d: %s"% (path, lineno, line.rstrip())
                        print ">> Make this change? [y/n]",
                        c = getch()
                        if c=='y' or c=='Y':
                            print "\n>> Making change"
                            changes_made = True
                        else:
                            print "\n>> Skipping change"
                            nline = line
                    else:
                        print "%s:%d: %s" % (path, lineno, line.rstrip())
                        changes_made = True
                if not options.dry_run:
                    tf.write(nline)
        if changes_made:
            subfiles += 1
        if not options.dry_run:
            tf.close()
            if changes_made:
                os.rename(tf.name, path)
    except Exception, e:
        if not options.dry_run:
            os.remove(tf.name)
        if options.ignore_errors:
            print "Problem with %s: %s" % (path, e)
        else:
            raise

print "Substitution occurred in %d files" % subfiles        
sys.exit(0)

                
            
        


